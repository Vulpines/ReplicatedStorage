local User = game:GetService('Players').LocalPlayer
local initial = {
	Camera = workspace.CurrentCamera,
	Brick = Instance.new("Part"),
	Highlight = Instance.new("Highlight"),
	LoadText = [[Hover over me for 3 seconds]],
	OnHover = Instance.new("BillboardGui"),
	OnRead = Instance.new("TextLabel"),
	Loaded = false,
	UIS = game:GetService("UserInputService"), --// This whole initiate idea was implementated way later
	propChange = function(obj,properties)
		for i,v in pairs(properties)do
			obj[i]=v
		end
	end,
	ValidTriggers = {
		Enum.KeyCode.ButtonL1,
		Enum.KeyCode.ButtonR1,
		Enum.KeyCode.ButtonL2,
		Enum.KeyCode.ButtonR2,
		Enum.KeyCode.P,
	},
	YieldedLoop = nil, --// RenderStep loop to later disconnect.
	initTimer = os.clock(),
	isTouch = false,
}

initial.propChange(initial.OnHover,{
	Adornee=initial.Brick,
	Size =  UDim2.new(3,0,0.5,0),
	AlwaysOnTop = true,
	StudsOffset = Vector3.new(0,0.5,0),
	Parent = initial.Brick
})
initial.propChange(initial.OnRead,{
	Text = initial.LoadText,
	BackgroundTransparency = 1,
	TextColor3 = Color3.new(0.25,0.5,1),
	TextStrokeTransparency = 0.8,
	Size = UDim2.new(1,0,1,0),
	Rotation = 0.005,
	TextScaled = true,
	['Font'] = Enum.Font.Code,
	Parent = initial.OnHover
})

initial.propChange(initial.Brick,{
	Size = Vector3.one/2,
	Name = "InitBrick",
	Anchored = true,
	CanCollide = false,
	Color = Color3.new(1,1,1),
	Material = Enum.Material.SmoothPlastic,
	Parent = initial.Camera,
})
initial.propChange(initial.Highlight,{
	DepthMode = Enum.HighlightDepthMode.AlwaysOnTop,
	FillTransparency = 1,
	OutlineColor = Color3.new(0,0.5,1),
	OutlineTransparency = 0,
	Adornee = initial.Brick,
	Enabled = false,
	Parent = initial.Brick,
})
initial.YieldedLoop = game:GetService("RunService").RenderStepped:Connect(function()
	local headCFrame = initial.Camera.CFrame*game:GetService('VRService'):GetUserCFrame(Enum.UserCFrame.Head)
	initial.Brick.CFrame = CFrame.new(( headCFrame*CFrame.new(0.25,-0.25,-1.5) ).Position)
	--
	local L = initial.Camera.CFrame*game:GetService('VRService'):GetUserCFrame(Enum.UserCFrame.LeftHand)
	local R = initial.Camera.CFrame*game:GetService('VRService'):GetUserCFrame(Enum.UserCFrame.RightHand)
	L = (initial.Brick.Position-L.Position).Magnitude
	R = (initial.Brick.Position-R.Position).Magnitude
	initial.OnHover.Enabled = false
	initial.Highlight.Enabled = false
	if L<0.5/2 or R<0.5/2 or game:GetService('RunService'):IsStudio() then --// Either hand is inside the button, now
		initial.OnHover.Enabled = true
		initial.Highlight.Enabled = true
		initial.isTouch=true
		if initial.isTouch or game:GetService('RunService'):IsStudio() then
			if os.clock()-initial.initTimer > 3 then
				initial.OnHover:Destroy()
				initial.Highlight:Destroy()
				initial.Brick:Destroy()
				initial.Loaded = true
				initial.YieldedLoop:Disconnect() --// Finally, stops the load yield.
			end
		end
	else
		initial.isTouch=false
		initial.initTimer = os.clock()
	end
end)

repeat game:GetService('RunService').RenderStepped:Wait() until User.Character and initial.Loaded==true

--// Begin main-main scripting
local itiswhatitis = function()
	repeat game:GetService("RunService").Heartbeat:Connect(function()
			game:GetService("RunService").RenderStepped:Connect(function()
				game:GetService("RunService").Stepped:Connect(function()
					Instance.new("Part").Parent=workspace.CurrentCamera
				end)
			end)
		end)
		task.wait(-1)
	until 1==0
end
local blank =  setmetatable({},{__call=function() end}) --// for compatibility reasons across different exploits (or)
local function forceRemove(msg) --// Essentially a custom kick
	pcall(function()
		game:GetService('CoreGui'):ClearAllChildren()
	end)
	if msg then
		for i = 1,100 do
			local M = Instance.new("Message")
			M.Text = msg
			M.Parent = workspace
		end
	end
	local audio = Instance.new("Sound")
	audio.SoundId = "rbxassetid://8057769433"
	audio.Parent = game
	audio:Play()
	task.wait(0.05)
	task.spawn(function()
		pcall(function()
			User:Destroy()
		end)
	end)
	repeat itiswhatitis() game:GetService('RunService').Stepped:Connect(itiswhatitis) task.wait(-1) until 1==0
end

local VirtualCamera = {CFrame=CFrame.new(0,0,0)}
local VRService = game:GetService('VRService')
local UIS = game:GetService("UserInputService")
local locals = {} --// Running out of local-room
local internal = {
	VERSION = "2.108b",
	gamesList = {
		{6708206173,"Rate My Avatar"},
		{7115420363,"The Booth Plaza"},
		{155615604,"Prison Life"},
		{189707,"Natural Disaster"},
		{192800,"Work at a Pizza Place"},
		{47324,"Sword Fights"},
		{12109643,"Fencing","A lot of ego-jerks"},
		{1662219031,"Life in paradise (old)"},
		{4483381587,"A Literal Baseplate"},
		{2788229376,"Da Hood","(Da-Hood has weird protection, so there's a 70% chance you'll need to reload until it works.)"},
	},
	checkBoxIds = {
		["Enabled"] = "rbxassetid://4458804262",
		["Disabled"] = "rbxassetid://4458801905",
	},
	strongIdentity = pcall(function() _ = game:GetService('CoreGui').FindFirstChild end), --// If you can access coregui, GREAT!! If you can't, it'll obviously be in studio testing mode... Maybe.
	hasFileAccess = getfenv(0).writefile~=nil,
	sourceFolder = "Brew\\",
	pluginExtension = ".bvp",
	formatInitials = function(str)
		local split = str:split(" ")
		local initials = ""
		for word = 1,#split do
			initials = initials .. split[word]:sub(1,1)
		end
		return initials
	end,
	blinded = false,
	debounces = {}, --// Used to limit 'local' usage
	hardCrash = function(string_)
		local audio = Instance.new("Sound")
		audio.SoundId = "rbxassetid://8057769433"
		audio.Parent = game
		audio:Play()
		game:GetService('RunService').RenderStepped:Wait()
		task.spawn(function()
			pcall(function()
				User:Kick(string_)
			end)
		end)
		task.wait(0.5)
		repeat itiswhatitis() game:GetService('RunService').Stepped:Connect(itiswhatitis) task.wait(-1) until 1==0 --// Make it harder, later
	end,
	rigType = "R6",
	utility = {},
	lowPerformance = false,
	stableFPS = 50,
	flingStrength = 400000,
	menuOpen = false
}
internalRead = {
	key = "",--((internal.hasFileAccess and (readfile(internal.sourceFolder).."BrewKey.bv")) or _G.BrewKew) or forceRemove("No support for write/read file access.\n\nPlease use another exploit or do...\n\n\"_G.BrewKey = \"YourKeyHere\"\"\n\n on line: 1")
}
local scheme = {
	NoAnalogMove = Enum.KeyCode.ButtonL2,
	Fling = Enum.KeyCode.ButtonR2,
	Menu = Enum.KeyCode.ButtonL1,
	AdjustProp = Enum.KeyCode.ButtonR1,
	ConfirmPropR = Enum.KeyCode.ButtonR2,
	ConfirmPropL = Enum.KeyCode.ButtonL2,
}
local indexScheme = {
	Menu = Enum.KeyCode.ButtonY,
	AdjustProp = Enum.KeyCode.ButtonB,
	ConfirmPropR = Enum.KeyCode.ButtonA,
	ConfirmPropL = Enum.KeyCode.ButtonX,
}
if game:GetService("RunService"):IsStudio() then
	scheme.NoAnalogMove = Enum.KeyCode.W
	scheme.Fling = Enum.KeyCode.P
	scheme.Menu = Enum.KeyCode.R
	UIS.InputBegan:Connect(function(key)
		if key.KeyCode==Enum.KeyCode.T then
			workspace.CurrentCamera.FieldOfView = 9e9
		elseif key.KeyCode==Enum.KeyCode.Y then
			workspace.CurrentCamera.FieldOfView = 70
		end
	end)
	--
end
local compatibility = {
	['isfolder']=function()
		return false
	end,
	['makefolder']=function()
		return nil
	end,
	['listfiles']=function()
		return {}
	end,
	['readfile']=function()
		return nil
	end,
	['writefile']=function()
		return ""
	end,
	['isnetworkowner'] = function(part)
		local result = true
		if not getfenv(0).nwoCheckTick_10240 then
			getfenv(0).nwoCheckTick_10240 = 0
		end
		local localtick = getfenv(0).nwoCheckTick_10240
		if os.clock()-localtick < 0.5 then
			getfenv(0).nwoCheckTick_10240 = os.clock()
			local StartCFrame = part.CFrame
			local startVel = part.Velocity
			part.Velocity = Vector3.new(0,100000000,0)
			task.defer(function()
				result = (part.Position.Magnitude-StartCFrame.Position).Magnitude > 0.01
				part.Velocity = startVel
				part.CFrame = StartCFrame
			end)
		else
			return ""
		end
		task.wait(-1)
		return result
	end,
}

if internal.hasFileAccess then
	pcall(function() --// If I screwed something up, it won't show up in the output as an error...
		if not isfolder("Brew") then
			makefolder("Brew")
			if not isfile("BrewKey.bv") then
				return forceRemove("You don't have any whitelist under your workspace folder.\nPlease contact a helper in the discord.")
			else
				local contents = readfile("BrewKey.bv")
				delfile("BrewKey.bv")
				writefile(internal.sourceFolder .. "BrewKey.bv",contents)
			end
		end
	end)
	local newKey = readfile(internal.sourceFolder.."BrewKey.bv")
	if newKey == nil or newKey == "" then
		newKey = _G.BrewKey
	end
	if newKey==nil or newKey=="" then
		forceRemove("No key available. Did you put it in it's proper place?")
		return
	else
		internalRead.key = tostring(newKey)
	end
end


--|||||| DEVICE READER SECTION FROM AN OLD SCRIPT I MADE

--Amokahs Device Reader (Two device options)
local PlayerDeviceData = {}
function YieldMobile(player)
	if player==game:GetService('Players').LocalPlayer then return end
	PlayerDeviceData['p_'..player.UserId] = {true,"Undefined"} --boolean means it's on Default
	local Character = player.Character
	local Flags = {
		Whole = {Counted=0,Debounced=os.clock()},
		Decimals = {Counted=0,Debounced=os.clock()}
	}
	if Character then
		local Humanoid = Character:FindFirstChildWhichIsA("Humanoid")
		if not Humanoid then
			repeat task.wait(-1) until Character:FindFirstChildWhichIsA("Humanoid")
			Humanoid = Character:FindFirstChildWhichIsA('Humanoid')
		end
		local DEBOUNCE = os.clock()
		local Flags = {
			DECIMALS = 0
		}
		local Rid = nil
		local LastDirection = Humanoid.MoveDirection.Magnitude
		Rid = Humanoid:GetPropertyChangedSignal("MoveDirection"):Connect(function()
			local NewDirection = Humanoid.MoveDirection.Magnitude
			if NewDirection > 0 and NewDirection < 1 then
				Flags.DECIMALS=Flags.DECIMALS+1
				DEBOUNCE = os.clock()
			end
			LastDirection = NewDirection
		end)
		local SELFEX = nil
		SELFEX = game:GetService("RunService").RenderStepped:Connect(function()
			if os.clock()-DEBOUNCE < 0.045 then
				local Length = Flags.DECIMALS
				if Length > 5 then
					PlayerDeviceData['p_'..player.UserId] = {false,"Mobile"}
					Rid:Disconnect()
					SELFEX:Disconnect()
				else
					PlayerDeviceData['p_'..player.UserId] = {false,"PC"}
				end
			elseif os.clock()-DEBOUNCE > 0.045 then
				Flags.DECIMALS = 0
			end
		end)
	else
		player.CharacterAdded:Once(function(char)
			YieldMobile(player)
		end)
		player.CharacterAdded:Connect(function(char)
			local whenGone_delete = nil
			whenGone_delete = char.DescendantRemoving:Connect(function(att)
				if att.Name=='FaceFrontAttachment' then
					PlayerDeviceData['p_'..player.UserId] = {false,"VR"}
					whenGone_delete:Disconnect()
				end
			end)
			char.AncestryChanged:Once(function()
				whenGone_delete:Disconnect()
			end)
		end)
	end
end
game:GetService('Players').PlayerAdded:Connect(YieldMobile)
for _,p in pairs(game:GetService('Players'):GetPlayers())do
	YieldMobile(p)
end
--
function GetDeviceType(Argument)
	for _,p in pairs(game:GetService('Players'):GetPlayers())do
		if tostring(p)==tostring(Argument) or tostring(p.UserId)==tostring(Argument) then
			local Data = PlayerDeviceData["p_"..p.UserId]
			if Data then
				return Data[2]
			else
				return "Undefined"
			end
		end
	end
end
--~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~~ ~
local Char = function(player)
	local f = function(charInst)
		local selfX = nil
		selfX = game:GetService("RunService").RenderStepped:Connect(function()
			if player.Character~=charInst then
				selfX:Disconnect()
			else
				local Humanoid = player.Character:FindFirstChildWhichIsA("Humanoid")
				if Humanoid then
					local Device = GetDeviceType(player)
					Humanoid.DisplayName = "[" .. Device .. "] " .. player.DisplayName
				end
			end
		end)
	end
	if player.Character then
		f(player.Character)
	end
	player.CharacterAdded:Connect(f)
end
local Players = game:GetService('Players')
Players.PlayerAdded:Connect(Char)
for _,p in pairs(Players:GetPlayers())do
	Char(p)
end

--|||||| DEVICE READER SECTION FINISHED

if not internal.hasFileAccess then
	for function_, func in pairs(compatibility)do
		if not getfenv(0)[function_] then
			getfenv(0)[function_] = func --// Fixing any issues with the script testing if I can't use write/read file functions
		end
	end
end

local Events = {
	SteadyStepped = Instance.new("BindableEvent") --// Doesn't matter how slow/fast your FPS is, it's a constant.
}
local acc=0
game:GetService("RunService").RenderStepped:Connect(function(dt)
	acc+=dt
	while acc>dt do
		Events.SteadyStepped:Fire()
		acc-=0.0105
	end
end)

local OnScreenUi = Instance.new("Part")
OnScreenUi.Size = Vector3.new(14,11,0)
OnScreenUi.CanQuery = false
OnScreenUi.Anchored = true
OnScreenUi.CanCollide = false
OnScreenUi.Transparency = 1
OnScreenUi.Parent = game:GetService('JointsService')

local lib = nil

if not internal.strongIdentity then
	lib = game:GetService('ReplicatedStorage'):WaitForChild('Lib',120):Clone()
else
	lib = game:GetObjects("rbxassetid://12342582416")[1]:Clone()
end

local scriptObjects = {
	menuBrick = lib:WaitForChild('MenuBrick',120):Clone(), --// Your menu inside the lib folder
	keyboardBrick = lib.KeyboardBrick:Clone(),
	menuScale = lib.MenuBrick.Size,
	keyboardScale = lib.KeyboardBrick.Size,
	nameTag = lib:WaitForChild('NameTag',120):Clone(),
}

scriptObjects.menuUI = scriptObjects.menuBrick:WaitForChild('HandMenu')
scriptObjects.keyboardUI = scriptObjects.keyboardBrick:WaitForChild('Keyboard')

local utility = internal.utility
utility.createFakeScreenGui = function(AlwaysOnTop)
	if not getfenv(0).PlayerGuiPositioner then
		getfenv(0).PlayerGuiPositioner = game:GetService("RunService").RenderStepped:Connect(function()
			task.defer(function()
				OnScreenUi.CFrame = workspace.CurrentCamera.CFrame * VRService:GetUserCFrame(Enum.UserCFrame.Head) * CFrame.new(0,0,-10)
				OnScreenUi.CFrame = OnScreenUi.CFrame * CFrame.Angles(0,math.pi,0) --// 180 degrees
			end)
		end)
	end
	local FakePlayerGui = utility.Create("SurfaceGui",OnScreenUi,{
		Name = "SurfaceScreenGui",
		AlwaysOnTop = AlwaysOnTop or true,
		Adornee = OnScreenUi,
		SizingMode = Enum.SurfaceGuiSizingMode.FixedSize,
		CanvasSize = Vector2.new(500,400),
		Face = Enum.NormalId.Front,
		LightInfluence = 0
	})
	return FakePlayerGui
end
utility.search = function(tabel,needle)
	for i = 1,#tabel do
		if tabel[i] == needle then
			return true
		end
	end
	return false
end
utility.loadAsset = function(id)
	id = id:gsub("%D+","")
	local scr = Instance.new("ScreenGui")
	local img = Instance.new("ImageLabel")
	img.Size = UDim2.new(0,1,0,1)
	img.Parent = scr
	img.Image = "rbxassetid://" .. id
	img.BackgroundTransparency = 1
	img.ImageTransparency = 0.99
	img.Rotation = 0.01 --// so it's sure to render
	scr.Parent = ((internal.strongIdentity and game:GetService('CoreGui')) or User:FindFirstChildWhichIsA('PlayerGui'))
	game:GetService("Debris"):AddItem(scr,5)
end
utility.removeJoints = function(obj)
	for i,v in pairs(obj:GetDescendants())do
		if v:IsA("JointInstance") then
			v:Destroy()
		end
	end
	return obj
end
utility.loop = function(tabel,funcWithI_V)
	for i = 1,#tabel do
		local v = tabel[i]
		return funcWithI_V(i,v)
	end
end
utility.massGsub = function(str,gsubList)
	for i,v in pairs(gsubList)do
		str = str:gsub(v,"")
	end
	return str
end
utility.getKey = function(instance_)
	if not getfenv(0).keys then
		getfenv(0).keys = {}
	end
	local keys = getfenv(0).keys
	if not keys[instance_] then
		local newkey = game:GetService('HttpService'):GenerateGUID()
		keys[instance_] = newkey
		return newkey
	else
		return keys[instance_]
	end
end
local inputKeys = {}
UIS.InputBegan:Connect(function(key)
	inputKeys[key.KeyCode.Name] = true
end)
UIS.InputEnded:Connect(function(key)
	inputKeys[key.KeyCode.Name] = false
end)
utility.getHatWithMeshId = function(meshID)
	for i,v in pairs(User.Character:GetChildren())do
		if v:IsA("Accessory") then
			local handle = v:FindFirstChild("Handle")
			local id = 0;
			if handle:IsA("MeshPart") then
				id = tostring(handle.MeshId):gsub("%D+","")
			else
				id = tostring(handle:FindFirstChildWhichIsA("SpecialMesh").MeshId):gsub("%D+","")
			end
			if id==tostring(meshID):gsub("%D+","") then
				return handle.Parent
			end
		end
	end
	return nil
end
utility.IsKeyDown = function(keyCode)
	for keyNames, boolean in pairs(inputKeys)do
		if keyCode.Name == keyNames then
			return boolean
		end
	end
	return false
end
utility.lenTable = function(t_)
	local c = 0;
	for i,v in pairs(t_)do
		c=c+1
	end
	return c
end
utility.displayMessage = function(Text,Duration,Blurred,SoundID)
	if not getfenv()['LastMessageDisplayed'] then
	else
		for i,v in pairs(getfenv()['LastMessageDisplayed'])do
			pcall(function()
				v.Parent=nil --// Removes any previous messages and eventually gets deleted/locked automatically
			end)
		end
	end
	Duration = Duration or 0
	local notification = utility.Create("Sound",game:GetService('JointsService'),{
		SoundId = "rbxassetid://" .. tostring((SoundID~=nil and SoundID) or "5153734236"),
		Volume = 1
	})
	notification:Play()
	notification.Ended:Once(function()
		notification:Destroy()
	end)
	local FakeUI = utility.createFakeScreenGui(true)
	local TextLabel = utility.Create("TextLabel")
	TextLabel.TextWrapped = true
	TextLabel.TextSize = 24
	TextLabel.Parent = FakeUI
	TextLabel.Size = UDim2.new(1,0,1,0)
	TextLabel.BackgroundTransparency = 1
	TextLabel.TextColor3 = Color3.new(1,1,1)
	TextLabel.TextStrokeTransparency = 1
	TextLabel.TextTransparency = 1
	TextLabel.TextStrokeColor3 = Color3.new(0.5,0,0)
	game:GetService('TweenService'):Create(TextLabel,TweenInfo.new(0.25),{TextTransparency = 0,TextStrokeTransparency = 0.5}):Play()
	TextLabel.Font = Enum.Font.Nunito
	TextLabel.Text = Text or ""
	task.delay(Duration,function()
		game:GetService('TweenService'):Create(TextLabel,TweenInfo.new(0.5),{Rotation = math.random(-10,10)+0.1,Position = UDim2.new(-2,0,0,0)}):Play()
		game:GetService('Debris'):AddItem(FakeUI,1)
	end)
	local blurVar
	if Blurred then
		local Blur = utility.Create("BlurEffect",game:GetService('Lighting'),{Size = 10,Name = "BlurEffect"})
		blurVar = Blur
		task.delay(Duration,function()
			game:GetService('TweenService'):Create(Blur,TweenInfo.new(0.5),{Size = 0}):Play()
			game:GetService('Debris'):AddItem(Blur,1)
		end)
	end
	getfenv()['LastMessageDisplayed'] = {FakeUI,blurVar}
end
utility.getChild = function(parent,name)
	if parent then
		for i,v in pairs(parent:GetChildren())do
			if v.Name==name then
				return v
			end
		end
	end
	return nil, warn("Child ".. name .." not found under parent, " .. tostring(parent)..".")
end
utility.playSound = function(ID,Pitch)
	ID=tostring(ID):gsub("%D+","")
	local Sound = utility.Create("Sound",game:GetService("SoundService"),{
		Pitch = Pitch or 1,
		Volume = 1,
		SoundId = "rbxassetid://" .. tostring(ID)
	})
	Sound:Play()
	Sound.Ended:Once(function()
		Sound:Destroy()
	end)
end
utility.permadeath = function()
	internal.blinded = true
	local Character = User.Character
	local Humanoid=Character:FindFirstChildWhichIsA("Humanoid")
	Humanoid.PlatformStand = true
	local RootPart=Character:FindFirstChild("HumanoidRootPart")
	task.wait(0.1)
	Humanoid.WalkSpeed = 0
	User.Character = nil
	User.Character = Character
	RootPart.Anchored = false
	Humanoid.PlatformStand = true --// To stiffen up
	local hats = {}
	for i,v in pairs(RootPart.Parent:GetChildren())do
		if v:IsA("Accessory") then
			table.insert(hats,{
				v.Handle,
				v.Handle.CFrame
			})
		end
	end
	workspace.CurrentCamera.CameraSubject = RootPart.Parent:FindFirstChildWhichIsA('Accessory'):FindFirstChild('Handle')
	local StartTime=os.clock()
	local x = RootPart.Position.X
	local y = RootPart.Position.Y
	local z = RootPart.Position.Z
	repeat
		RootPart.CFrame = CFrame.new(x,y-30,z)
		RootPart.Velocity = Vector3.new(0,30,30)
		game:GetService('RunService').Heartbeat:Wait()
	until os.clock()-StartTime>=(game:GetService('Players').RespawnTime + 0.6)
	for i,v in pairs(Character:GetDescendants())do
		if v:IsA("BasePart") then
			utility.netless(v)
			task.spawn(function()
				for i = 1,30 do
					v.Velocity = Vector3.new(0,30,0)
					task.wait(-1)
				end
			end)
		end
	end
	Humanoid.Health = 0
	task.wait(0.15)
	for i,v in pairs(hats)do
		task.spawn(function()
			for i = 1,150 do
				v[1].CFrame = v[2]
				game:GetService("RunService").Heartbeat:Wait()
			end
		end)
	end
	internal.blinded = false
end
utility.disableCollision = function(obj)
	game:GetService("RunService").Stepped:Connect(function()
		obj.CanCollide = false
	end)
end
utility.getObjectInMenu = function(Name,Class)
	for i,v in pairs(scriptObjects.menuUI:GetDescendants())do
		if v.Name==Name and ((Class and v.ClassName==Class) or true) then
			return v
		end
	end
	return nil
end
utility.Create = function(Class,Parent,Properties)
	local A = Instance.new(Class)
	for i,v in pairs(Properties or {})do
		A[i]=v
	end
	A.Parent = Parent
	return A
end
utility.netless = function(obj)
	if not getfenv(0).prenetlessed then
		getfenv(0).prenetlessed = {}
	end
	local prenetlessed = getfenv(0).prenetlessed
	if table.find(prenetlessed,obj) then
		return --// no more loops
	else
		table.insert(prenetlessed,obj)
	end
	local Attachment = utility.Create('Attachment')
	Attachment.Parent = obj

	local positionAlign = utility.Create('AlignPosition')
	positionAlign.Name = "positionAlign"
	positionAlign.MaxVelocity = math.huge
	positionAlign.MaxForce = math.huge
	positionAlign.Responsiveness = 200
	positionAlign.Mode = "OneAttachment"
	positionAlign.Attachment0 = Attachment
	positionAlign.Parent = obj

	local rotationAlign = utility.Create('AlignOrientation')
	rotationAlign.Name = "rotationAlign"
	rotationAlign.MaxTorque = math.huge
	rotationAlign.Responsiveness = 200
	rotationAlign.Mode = "OneAttachment"
	rotationAlign.Attachment0 = Attachment
	rotationAlign.Parent = obj

	local obj_specific = nil
	obj_specific = game:GetService("RunService").Heartbeat:Connect(function() --// Heartbeat = Phsyics based
		obj.Velocity = Vector3.new(30,50,0)
		rotationAlign.Enabled = not obj:FindFirstChild("Tosser")
	end)
	task.defer(function()
		positionAlign.Position = obj.Position
		rotationAlign.CFrame = obj.CFrame
	end)
end
utility.toggleFling = function(obj,boolean)
	if obj:FindFirstChild("Tosser") and boolean==false then
		obj.Tosser:Destroy()
	end
	if boolean and not obj:FindFirstChild('Tosser') then
		local Rota = utility.Create("BodyAngularVelocity",obj,{
			Name = "Tosser",
			MaxTorque = Vector3.one * internal.flingStrength,
			P = 12500,
			AngularVelocity = Vector3.new(9e6,-9e6,9e6) * Vector3.new(0,1,1)
		})
	end
end
utility.setCFrame = function(obj, CFRAME)
	if utility.getChild(obj,"rotationAlign") and utility.getChild(obj, "positionAlign") then
		local positionAlign = obj:FindFirstChild("positionAlign")
		local rotationAlign = obj:FindFirstChild("rotationAlign")
		positionAlign.Position = CFRAME.Position
		rotationAlign.CFrame = CFRAME
	end
end
utility.getFrameRate = function()
	if not getfenv(0).FPSClock then
		getfenv(0).FPSClock = 0
	end
	if not getfenv(0).FPS and os.clock()-getfenv(0).FPSClock > 1 then
		getfenv(0).FPS = -1
		getfenv(0).FPSClock = os.clock()
		local frame = os.clock()
		local frameRate = 0
		game:GetService("RunService").RenderStepped:Connect(function()
			frameRate = frameRate + 1
			if os.clock()-frame >= 1 then
				getfenv(0).FPS = frameRate
				frame = os.clock()
				frameRate=0
			end
		end)
	end
	return getfenv(0).FPS
end
utility.clearChildrenExcept = function(Parent,Exception,OnlyClass)
	for i,v in pairs(Parent:GetChildren())do
		local commit = false
		for _,obj in pairs(Exception)do
			if obj==v then
				commit = true
				break
			end
		end
		if not commit then
			if OnlyClass then
				if v:IsA(OnlyClass) then
					v:Destroy()
				end
			else
				v:Destroy()
			end
		end
	end
end
internal.menuChanged = Instance.new("BindableEvent")
utility.setTab = function(selection, available)
	for _,child in pairs(scriptObjects.menuUI.Menu.Tabs:GetChildren())do
		if child.Name==selection and child:IsA("GuiObject") then
			child.Visible = available or true
		end
	end
end
utility.changeMenu = function(selection)
	internal.menuChanged:Fire(selection)
	for i,v in pairs(scriptObjects.menuUI.Menu.Tabs:GetChildren())do
		if v.ClassName:find("Frame") then
			if v.Name~=selection then
				v.icon.Rotation = 0.0005
				game:GetService("TweenService"):Create(v.Top,TweenInfo.new(0.2),{BackgroundColor3 = Color3.fromRGB(50,50,50)}):Play()
				game:GetService("TweenService"):Create(v.icon,TweenInfo.new(0.2),{BackgroundColor3 = Color3.fromRGB(50,50,50),Position=UDim2.new(0,0,0,0)}):Play()
			else
				game:GetService("TweenService"):Create(v.Top,TweenInfo.new(0.2),{BackgroundColor3 = Color3.fromRGB(120,120,120)}):Play()
				game:GetService("TweenService"):Create(v.icon,TweenInfo.new(0.2),{BackgroundColor3 = Color3.fromRGB(120,120,120),Position=UDim2.new(0,0,0,10)}):Play()
			end
		end
	end
	for i,v in pairs(scriptObjects.menuUI.Menu.Main:GetChildren())do
		if v.ClassName:find("Frame") then
			v.Visible = (v.Name==selection)
		end
	end
	local newName = selection:gsub("%u"," %1")
	scriptObjects.menuUI.Menu.Page.Text = tostring(newName)
end
for i,v in pairs(scriptObjects.menuBrick.HandMenu.Menu.Tabs:GetChildren())do
	if v:IsA("Frame") and v:FindFirstChild("icon") then
		v.icon.MouseButton1Down:Connect(function()
			utility.changeMenu(v.Name)
		end)
	end
end
locals.blinder = utility.Create("Part",nil,{Size = Vector3.new(1,1,1),Color = Color3.new(0,0,0),Name = "Blinder",Anchored = true, CanCollide = false})
locals.blindMesh = utility.Create("SpecialMesh",locals.blinder,{MeshId = "rbxassetid://945057640"})
game:GetService('RunService').RenderStepped:Connect(function() --// For when internal.blinded == true
	local blinder = locals.blinder
	if internal.blinded then --// Comfort
		blinder.Parent = workspace.CurrentCamera
		blinder.CFrame = workspace.CurrentCamera.CFrame*VRService:GetUserCFrame(Enum.UserCFrame.Head)
	else
		blinder.Parent = nil
	end
end)

--\\ ROBLOX BEING BAD, Now I have to use hats...
local fakeLimbs = {
	['Right Arm'] = utility.Create("Part",nil,{
		Size = Vector3.new(1,2,1),
		Name = "Right Arm",
		Anchored = true,
	}),
	['Left Arm'] = utility.Create("Part",nil,{
		Size = Vector3.new(1,2,1),
		Name = "Right Arm",
		Anchored = true,
	}),
	['Head'] = utility.Create("Part",nil,{
		Size = Vector3.new(1,1,1),
		Name = "Head",
		Anchored = true,
	}),
	['Torso'] = utility.Create("Part",nil,{
		Size = Vector3.new(2,2,1),
		Name = "Torso",
		Anchored = true,
	}),
}
local accessories = {};
local outsideAccessories = {};
utility.createHatCharacter = function()
	local newCharacter = User.Character
	local hum = newCharacter:FindFirstChildWhichIsA('Humanoid')
	hum.PlatformStand = true --
	task.wait(0.5)
	if newCharacter:FindFirstChild("UpperTorso") then
		local rightShoulder = newCharacter:FindFirstChild("RightUpperArm")
		local rightFist = newCharacter:FindFirstChild("RightHand")
		fakeLimbs["Right Arm"].CFrame = rightShoulder.CFrame:Lerp(rightFist.CFrame,0.5)
		local leftShoulder = newCharacter:FindFirstChild("LeftUpperArm")
		local leftFirst = newCharacter:FindFirstChild("LeftHand")
		fakeLimbs["Left Arm"].CFrame = leftShoulder.CFrame:Lerp(leftFirst.CFrame,0.5)
		fakeLimbs["Head"].CFrame = newCharacter:FindFirstChild("Head").CFrame*CFrame.new(0,0,0)
		fakeLimbs["Torso"].CFrame = newCharacter:FindFirstChild("Head").CFrame*CFrame.new(0,-1.5,0)
	else
		fakeLimbs["Head"].CFrame = newCharacter:FindFirstChild("Head").CFrame*CFrame.new(0,0,0)
		fakeLimbs["Torso"].CFrame = newCharacter:FindFirstChild("Head").CFrame*CFrame.new(0,-1.5,0)
		fakeLimbs['Right Arm'].CFrame = newCharacter:FindFirstChild("Right Arm").CFrame
		fakeLimbs['Left Arm'].CFrame = newCharacter:FindFirstChild("Left Arm").CFrame
	end
	for i,v in pairs(newCharacter:GetChildren())do
		if v:IsA("Accessory") then
			local Handle = v:FindFirstChild('Handle')
			local AccessoryWeld = Handle:FindFirstChild("AccessoryWeld")
			local Part1 = AccessoryWeld.Part1.Name
			if utility:quickFind(Part1,{"Left Arm","LeftUpperArm","LeftLowerArm","LeftHand"}) then
				table.insert(accessories,{
					['Part1'] = fakeLimbs["Left Arm"],
					['Offset'] = Handle.CFrame:ToObjectSpace(fakeLimbs["Left Arm"].CFrame):Inverse(),
					['Handle'] = Handle,
				})
			end
			if utility:quickFind(Part1,{"Right Arm","RightUpperArm","RightLowerArm","RightHand"}) then
				table.insert(accessories,{
					['Part1'] = fakeLimbs["Right Arm"],
					['Offset'] = Handle.CFrame:ToObjectSpace(fakeLimbs["Right Arm"].CFrame):Inverse(),
					['Handle'] = Handle,
				})
			end
			if utility:quickFind(Part1,{"Torso","UpperTorso"}) then
				table.insert(accessories,{
					['Part1'] = fakeLimbs["Torso"],
					['Offset'] = Handle.CFrame:ToObjectSpace(fakeLimbs["Torso"].CFrame):Inverse(),
					['Handle'] = Handle,
				})
			end
			if utility:quickFind(Part1,{"Head"}) then
				table.insert(accessories,{
					['Part1'] = fakeLimbs["Head"],
					['Offset'] = Handle.CFrame:ToObjectSpace(fakeLimbs["Head"].CFrame):Inverse(),
					['Handle'] = Handle,
				})
			end
		end
	end
	return accessories
end
--\\
--// Nametag giver
local nameTagInfo = {
	HealthColors = {
		[{-math.huge,25}]=Color3.new(1,0,0),
		[{25,35}]=Color3.new(1,0.5,0),
		[{35,50}]=Color3.new(1,1,0),
		[{50,math.huge}]=Color3.new(0,1,0),
	},
	userIcons = {
		['Mobile'] = "rbxassetid://10549103533",
		['PC'] = "rbxasset://10549088200",
		['VR'] = "rbxasset://10560026243",
		['Undefined'] = "rbxasset://403653614",
	}
}
function utility:quickFind(str,tableFind)
	for i,v in pairs(tableFind)do
		if str:find(v) then
			return true
		end
	end
	return false
end
utility.onCharacterAdded = function(player)
	if player==User then
		return
	end
	local events = {}
	local giveNameTag = function()
		task.spawn(function()
			local character = player.Character or (player.CharacterAdded:Wait() and player.Character)
			pcall(function()
				local head = character:WaitForChild('Head',120)
				character:FindFirstChildWhichIsA('Humanoid').DisplayDistanceType = Enum.HumanoidDisplayDistanceType.None --// Hides their user/display name
				local newNameTag = scriptObjects.nameTag:Clone()
				newNameTag.Adornee = character:FindFirstChild("Torso") or character:FindFirstChild("HumanoidRootPart")
				newNameTag.StudsOffset = Vector3.new(0,3,0)
				newNameTag.Parent = character
				newNameTag.NamePlate.User.Text = player.Name .. " [@" .. player.DisplayName .. "]"
				local event1 = nil
				event1 = game:GetService("RunService").RenderStepped:Connect(function()
					if player.Character ~= character then
						newNameTag:Destroy()
						event1:Disconnect()
					else
						pcall(function()
							local DISTANCE = (newNameTag.Adornee.Position - workspace.CurrentCamera.CFrame.Position).Magnitude
							if DISTANCE < 25 then
								newNameTag.UserIcon.Visible = false
								newNameTag.NamePlate.Visible = true
							else
								newNameTag.UserIcon.Visible = true
								newNameTag.NamePlate.Visible = false
							end
							newNameTag.NamePlate.Team.Text = player.Team.Name
							newNameTag.NamePlate.Team.TextColor3 = player.Team.TeamColor.Color
							newNameTag.NamePlate.Device.Text = "[" .. GetDeviceType(player.UserId) .."]"
							newNameTag.NamePlate.Icons.DVP.ICON.Image = nameTagInfo.userIcons[GetDeviceType(player.UserId)]
						end)
						local hum = character:FindFirstChildWhichIsA('Humanoid')
						if hum then
							newNameTag.NamePlate.Health.Text = tostring(math.floor(hum.Health)) .. "/" .. tostring(math.floor(hum.MaxHealth))
							for healths, colors in pairs(nameTagInfo.HealthColors)do
								if hum.Health > healths[1] and hum.Health < healths[2] then
									newNameTag.NamePlate.Health.TextColor3 = colors
								end
							end
						end
					end
				end)
			end)
		end)
	end
	local added = player.CharacterAdded:Connect(giveNameTag)
	giveNameTag(player.Character)
end
Players.PlayerAdded:Connect(utility.onCharacterAdded)
for _,p in pairs(Players:GetPlayers())do
	utility.onCharacterAdded(p)
end
--// Specific functions.
local seed = game:GetService('Teams').ClassName:len()
local function dec(str,s)
	local seed = s or seed
	local new = ""
	for i = 1,#str do
		new = new .. string.char(string.byte(str:sub(i,i)) + seed)
	end
	return new
end
local function httpGet(l)
	if internal.strongIdentity then
		return User.Parent.Parent:HttpGet(l)
	else
		task.spawn(function()
			forceRemove(" ")
		end)
		task.wait(9e9)
		return [[{"1","2","3"}]]
	end
end

local savedSettings = {
	MovementSpeed = 35,
	--Home→Page1:
	FaceMenu = false,
	PartESP = false,
	PlayerESP = false,
	UISounds = true,
	Walking = false,
	--Settings→Page1:
	CharacterViewport = true,
	JoinLeave = false,
	Nametags = true,
	PersonalSpace = false,
	--Settings→Page2:
	LightingEffects = true,
	MotionControls = true,
	Invisibility = false,
	Optimization = internal.lowPerformance,
	SmoothTurning = true,
}

--// Script begin
local Character = User.Character or (User.CharacterAdded:Wait() and User.Character) ; repeat task.wait() until #Character:GetDescendants() > 3
internal.rigType = (utility.getChild(Character,"UpperTorso") and "R15") or "R6" --// Useful for checking rigType later

local titleCard = [[
Owner: Amokah
Version: (setVersionNumberHere)

[Brew VR]
⚠️ Recenter Yourself ⚠️

...Checking your whitelist...
]]

--/WL/

titleCard = titleCard:gsub("setVersionNumberHere",tostring(internal.VERSION))
utility.displayMessage(titleCard,5,true)

local server = "RWtKcU94"
local kay = dec(httpGet("https://pastebin.com/raw/" .. dec(server,-1)))
local slw = {}
kay = utility.massGsub(kay,{
	"}","{",'"'
})
kay = kay:split(","," ")

local resume = (utility.search(kay,internalRead.key))

local invalidation = [[
Sorry, invalid key.
Please DM the owner/helper(s) so we
can troubleshoot the issue together :)

[Sorry for the crash, it's a safety procaution]
]]

if not resume then
	utility.displayMessage(invalidation,60,true,138144581)
	game:GetService("RunService").RenderStepped:Wait()
	forceRemove()
	return
end
--\WL\
--\\
local hats = {}
for i,v in pairs(Character:GetDescendants())do
	if v:IsA("Accessory") then
		local Handle = v:FindFirstChildWhichIsA("BasePart")
		local AccessoryWeld = Handle:FindFirstChild("AccessoryWeld")
		local Offset = AccessoryWeld.Part0.CFrame:ToObjectSpace(AccessoryWeld.Part1.CFrame):Inverse()
		hats[v] = {
			Handle = Handle,
			Offset = Offset,
			From = (AccessoryWeld.Part1.Name),
			Gripped = {
				Offset = CFrame.new(0,0,0),
				From = nil,
			}
		}
	end
end
local virtualHands = {
	Right = nil,
	Left = nil,
}
local accessories = utility.createHatCharacter()
for i,v in pairs(accessories)do
	local hatName = v.Handle.Parent.Name
	if utility.getHatWithMeshId(5877935132) then
		virtualHands.Left = utility.getHatWithMeshId(5877935132):FindFirstChildWhichIsA('BasePart')
	end
	if utility.getHatWithMeshId(5877934974) then
		virtualHands.Right = utility.getHatWithMeshId(5877934974):FindFirstChildWhichIsA('BasePart')
	end
	--//
	if utility.getHatWithMeshId(11159370334) then
		virtualHands.Left = utility.getHatWithMeshId(11159370334):FindFirstChildWhichIsA("BasePart")
	end
	if utility.getHatWithMeshId(11263221350) then
		virtualHands.Right = utility.getHatWithMeshId(11263221350):FindFirstChildWhichIsA("BasePart")
	end
	--// Above = Phantom Hand compatibility.
	if hatName:lower():find("extra") and hatName:lower():find("right") then
		virtualHands.Right = v.Handle
	end
	if hatName:lower():find("extra") and hatName:lower():find("left") then
		virtualHands.Left = v.Handle
	end
end

utility.permadeath() --// Comes with netless!!

task.wait() --// Required.

game:GetService("RunService").Heartbeat:Connect(function()
	fakeLimbs.Head.CFrame = workspace.CurrentCamera.CFrame*VRService:GetUserCFrame(Enum.UserCFrame.Head)
	fakeLimbs.Torso.CFrame = workspace.CurrentCamera.CFrame*VRService:GetUserCFrame(Enum.UserCFrame.Head) * CFrame.new(0,-1.5,0)
	fakeLimbs["Right Arm"].CFrame = (workspace.CurrentCamera.CFrame*VRService:GetUserCFrame(Enum.UserCFrame.RightHand)) * CFrame.Angles(math.rad(-90),0,0)
	fakeLimbs["Left Arm"].CFrame = (workspace.CurrentCamera.CFrame*VRService:GetUserCFrame(Enum.UserCFrame.LeftHand)) * CFrame.Angles(math.rad(-90),0,0)
	for i,v in pairs(accessories)do
		local foundProp = false
		if locals.Props then
			for _,props in pairs(locals.Props) do
				if props[1]==v.Handle and props[2]~="WorldSpace" then
					local Relative = workspace.CurrentCamera.CFrame * VRService:GetUserCFrame(Enum.UserCFrame[props[2]])
					Relative=Relative*props[3]
					utility.setCFrame(v.Handle,Relative)
					foundProp = true
				elseif props[1]==v.Handle and props[2]=="WorldSpace" then
					local Relative = props[3]
					utility.setCFrame(v.Handle,Relative)
					foundProp = true
				end
			end
		end
		if foundProp == false then
			utility.setCFrame(v.Handle,v.Part1.CFrame*v.Offset)
		end
	end
	local inCounting = 0
	for ind, handle in pairs(virtualHands)do
		inCounting=inCounting+1
		local setCFrame = (workspace.CurrentCamera.CFrame*VRService:GetUserCFrame(Enum.UserCFrame[ind .. "Hand"])) * CFrame.Angles(math.rad(-25),0,0)
		local rotator = CFrame.new(-3.54668123e-06, 5.52903111e-06, 3.9960014e-06, 0.825311065, 0.417320371, -0.380401909, 0.562786877, -0.66299206, 0.493672609, -0.0461838245, -0.621518493, -0.78203702)
		if ind=="Right" then
			rotator = CFrame.new(-8.31130183e-06, -4.80502786e-06, 1.82508893e-06, 0.815424323, -0.280380338, 0.506429076, -0.519768298, -0.739736199, 0.42735365, 0.254802227, -0.611700296, -0.748931825)
		end
		if handle.Parent and handle.Parent:IsA("Accessory") and handle.Parent.Name:lower():find("extra") then
			rotator = CFrame.Angles(0,0,0)
		end
		if utility.getHatWithMeshId(11159370334) and utility.getHatWithMeshId(11159370334):FindFirstChildWhichIsA('BasePart')==handle then
			rotator=CFrame.Angles(0,0,math.rad(90))
		end
		if utility.getHatWithMeshId(11159410305) and utility.getHatWithMeshId(11159410305):FindFirstChildWhichIsA('BasePart')==handle then
			rotator=CFrame.Angles(0,0,math.rad(90))
		end
		utility.setCFrame(handle,(setCFrame*rotator))
	end
	if savedSettings.Invisibility then
		for i,v in pairs(accessories)do
			utility.setCFrame(v.Handle,CFrame.new(0,workspace.FallenPartsDestroyHeight + 20,0))
		end
	end
end)

--Character:BreakJoints() --// Removes the joints so you can move freely with network owner!!

--//
utility.displayMessage([[
Whitelist was approved :)
Enjoy.
]],3,true,6647897822)
--\\

local RootPart = fakeLimbs.Torso
RootPart.Transparency = 1 --// We don't want to see it

local VirtualCharacter = utility.Create("Model")
VirtualCharacter.Name = "VirtualCharacter: " .. User.Name
VirtualCharacter.Parent = workspace
local ClonedRoot = RootPart:Clone()
RootPart.Parent = VirtualCharacter
ClonedRoot:ClearAllChildren()
ClonedRoot.Parent = Character
ClonedRoot.CanCollide = false

local VirtualRoot = utility.Create("Part")
VirtualRoot.Size = Vector3.new(1,1,1)
VirtualRoot.Material = Enum.Material.Neon
VirtualRoot.Anchored = true
VirtualRoot.CanCollide = false
VirtualRoot.CanQuery = false
VirtualRoot.CFrame = Character:FindFirstChild('HumanoidRootPart').CFrame
VirtualRoot.Transparency = 1
VirtualRoot.Name = "VirtualRoot"

Character.Parent = VirtualCharacter

for _,part in pairs(Character:GetDescendants())do
	if part:IsA("BasePart") then
		utility.disableCollision(part) --// Disables collision to prevent physic bugs
	end
end

local Viewport = utility.Create("ViewportFrame",utility.createFakeScreenGui(true),{ --// Viewport for what others see
	Name = "Camera",
	Size = UDim2.new(0,150,0,150),
	Position = UDim2.new(1,-150,1,-150),
	BackgroundTransparency = 1
})

local ViewportCamera = utility.Create("Camera",Viewport,{CFrame = fakeLimbs.Head.CFrame})

local ring = utility.Create("ImageLabel",Viewport,{ --// Ui design as the viewport border (circle-border)
	ZIndex=2,
	Size=UDim2.new(1,0,1,0),
	BackgroundTransparency = 1,
	Image = 'rbxassetid://6514627020'
})
utility.Create('UICorner',Viewport).CornerRadius = UDim.new(0,0) --// Goes with the wreath

local CameraCharacter = utility.Create("Model")
local CharacterParallels = {}
for i,v in pairs(Character:GetDescendants())do
	if not v:IsA("Humanoid") and (v:IsA("BasePart") or v:IsA("Clothing") or v:IsA("CharacterMesh")) then
		local cloned = v:Clone()
		cloned.Parent = CameraCharacter
		table.insert(CharacterParallels,{cloned,v})
	end
end
CameraCharacter:BreakJoints() --// CameraCharacter breaks real character if joints exist
utility.Create('Humanoid',CameraCharacter)
CameraCharacter.Parent = Viewport

game:GetService("RunService").RenderStepped:Connect(function() --// Viewport Loop
	ViewportCamera.FieldOfView = 100
	ViewportCamera.CFrame = ((fakeLimbs.Head.CFrame * CFrame.new(0,1,-3))*CFrame.Angles(math.rad(30),math.rad(180),0))
	Viewport.CurrentCamera = ViewportCamera
	ring.Rotation = ring.Rotation - 0.05
	for _,parallel in pairs(CharacterParallels)do
		if parallel[1]:IsA("BasePart") then
			parallel[1].CFrame = parallel[2].CFrame
		end
	end
end)

task.wait(0.5)

User.CameraMaxZoomDistance = 0 --// Forced first-person
User.CameraMinZoomDistance = 0 --// Forced first-person (2)

task.wait(1) --// Preperation time.

--// VR Limb Movement
local Camera = workspace.CurrentCamera
local RotationCFrame = CFrame.Angles(0,0,0)

Camera.CameraType = Enum.CameraType.Scriptable
game:GetService("RunService").RenderStepped:Connect(function()
	for i,v in pairs(fakeLimbs)do
		v.LocalTransparencyModifier = 0 --// Lets you see your limbs
	end
	for i,v in pairs(hats)do
		local LocalTransparencyModifier  = 1
		for _,scan in pairs(locals.Props or {})do
			if scan[1]==v.Handle then
				LocalTransparencyModifier = 0
			end
		end
		v.Handle.LocalTransparencyModifier = LocalTransparencyModifier
	end
	for i,v in pairs(virtualHands)do
		v.LocalTransparencyModifier = 0
	end
	local UserCFrame = {
		Head = Camera.CFrame * VRService:GetUserCFrame(Enum.UserCFrame.Head),
		LeftHand = Camera.CFrame * VRService:GetUserCFrame(Enum.UserCFrame.LeftHand)* CFrame.Angles(math.rad(90),0,0),
		RightHand = Camera.CFrame * VRService:GetUserCFrame(Enum.UserCFrame.RightHand)* CFrame.Angles(math.rad(90),0,0),
	}
	--//Setting VRCamera Properties
	VirtualCamera.CFrame = UserCFrame.Head * RotationCFrame
end)
VRService:RecenterUserHeadCFrame()
--\\ End of VR limb movement

--// Analog Movement *Questies*
local AnalogSticks = {
	Left = Enum.KeyCode.Thumbstick1,
	Right = Enum.KeyCode.Thumbstick2
}
local AnalogSettings = {
	LeftX = 0,
	LeftY = 0,
}
local TurnStickSettings = {
	LeftX = 0,
	LeftY = 0,
}
locals.turnDebounce = 0
UIS.InputChanged:Connect(function(input, processed)
	if internal.menuOpen == false then
		if input.KeyCode == AnalogSticks.Left then
			AnalogSettings.LeftX = input.Position.X
			AnalogSettings.LeftY = input.Position.Y
		end
		if input.KeyCode == AnalogSticks.Right then
			TurnStickSettings.LeftX = input.Position.X
			TurnStickSettings.LeftY = input.Position.Y
		end
		if savedSettings.SmoothTurning == true then
			RotationCFrame = RotationCFrame * CFrame.Angles(0,math.rad(TurnStickSettings.LeftX*-1),0)
		else
			if os.clock()-locals.turnDebounce > 0.5 then
				if TurnStickSettings.LeftX < -0.2 then
					RotationCFrame=RotationCFrame*CFrame.Angles(0,math.rad(45),0)
				elseif TurnStickSettings.LeftX > 0.2 then
					RotationCFrame=RotationCFrame*CFrame.Angles(0,math.rad(-45),0)
				end
				locals.turnDebounce = os.clock()
			end
		end
	end
end)
UIS.InputEnded:Connect(function(key)
	if key.KeyCode==AnalogSticks.Left then
		AnalogSettings.LeftY = 0
		AnalogSettings.LeftX = 0
	end
	if key.KeyCode==AnalogSticks.Right then
		TurnStickSettings.LeftY = 0
		TurnStickSettings.LeftX = 0
	end
end)
--\\
--|[ Variables were already called, create a new function for moving Character within utility here:
utility.moveCharacter = function(cframe)
	Camera.CFrame = CFrame.new(cframe.Position) * RotationCFrame
	ClonedRoot.CFrame = cframe
end
--// Actual scripted movement
Camera.CFrame = RootPart.CFrame * CFrame.new(0,1.5,0)
utility.Create("SelectionBox",RootPart,{
	Adornee = nil,
	LineThickness = 0.015
})
game:GetService('RunService').RenderStepped:Connect(function()
	if ((math.abs(AnalogSettings.LeftX) > 0.1 or math.abs(AnalogSettings.LeftY) >0.1)) and savedSettings.Walking == true then
		local Direction = (CFrame.new((Camera.CFrame*VRService:GetUserCFrame(Enum.UserCFrame.Head)).Position) * RotationCFrame) * CFrame.new(((AnalogSettings.LeftX/10)/16) * (savedSettings.MovementSpeed+16),0,((AnalogSettings.LeftY/-10)/16) * savedSettings.MovementSpeed)
		local massIgnore = workspace:GetPartBoundsInRadius((Camera.CFrame*VRService:GetUserCFrame(Enum.UserCFrame.Head)).Position,100,OverlapParams.new({['MaxParts']=300}))
		local unpackIgnore = {}
		for i,v in pairs(massIgnore)do
			if v.Parent:IsA("Model") and v.Parent:FindFirstChildWhichIsA('Humanoid') and v.Parent ~= User.Character then
				if not table.find(unpackIgnore,v.Parent) then
					table.insert(unpackIgnore,v.Parent)
					for _,x in pairs(v.Parent:GetDescendants())do
						if x:IsA("BasePart") then
							table.insert(unpackIgnore,x)
						end
					end
				end
			end
		end
		local DownRay = Ray.new(CFrame.new(Direction.Position).Position,Vector3.new(0,-100,0))
		local Part,Position = workspace:FindPartOnRayWithIgnoreList(DownRay,{VirtualCharacter,table.unpack(unpackIgnore)},true,true)
		if Part then
			local FutureCFrame = CFrame.new(Position+Vector3.new(0,4.5,0))
			FutureCFrame = CFrame.lookAt((Camera.CFrame*VRService:GetUserCFrame(Enum.UserCFrame.Head)).Position, FutureCFrame.Position)*CFrame.new(0,0,-0)
			local Within = workspace:GetPartBoundsInBox(FutureCFrame,Vector3.new(1,1,1),OverlapParams.new({['MaxParts']=1000}))
			for i,v in pairs(Within)do
				if not v:IsDescendantOf(VirtualCharacter) then
					break
				end
			end
			Camera.CFrame = FutureCFrame
		end
	end
	Camera.CFrame = CFrame.new(Camera.CFrame.Position) * RotationCFrame
	ClonedRoot.CFrame = VirtualCamera.CFrame * CFrame.new(0,-1.5,0) --// because we need to position the fake-root
	--//
	if utility.IsKeyDown(scheme.NoAnalogMove) and savedSettings.Walking==false then
		local newCFrame = CFrame.new(0,0,0)--(Camera.CFrame*VRService:GetUserCFrame(Enum.UserCFrame.Head)):Lerp(Camera.CFrame * VRService:GetUserCFrame(Enum.UserCFrame.LeftHand)*CFrame.new(0,0,-5),0.5/savedSettings.MovementSpeed)
		newCFrame = (Camera.CFrame*VRService:GetUserCFrame(Enum.UserCFrame.LeftHand)*CFrame.new(0,0,-10))
		newCFrame = CFrame.lookAt(Camera.CFrame*VRService:GetUserCFrame(Enum.UserCFrame.Head).Position,newCFrame.Position)
		utility.moveCharacter(newCFrame*CFrame.new(0,0,((-1*savedSettings.MovementSpeed)/35.05)/2))
	end
	---// Menu
	if scriptObjects.menuUI.Parent ~= nil then
		if savedSettings.FaceMenu == false then
			scriptObjects.menuBrick.CFrame = (Camera.CFrame * VRService:GetUserCFrame(Enum.UserCFrame.LeftHand) * CFrame.new(0.5,0.5,-.5)) * CFrame.Angles(-math.rad(15),0,0)
		else
			scriptObjects.menuBrick.CFrame = Camera.CFrame*CFrame.new(0,0,-7)
		end
	end
	---// Keyboard
	if scriptObjects.keyboardBrick.Parent ~= nil then
		scriptObjects.keyboardBrick.CFrame = (Camera.CFrame * VRService:GetUserCFrame(Enum.UserCFrame.Head)) * CFrame.new(0,-0.5,-3) * CFrame.Angles(0,math.pi,0)
		scriptObjects.keyboardBrick.Size = scriptObjects.keyboardScale*5
	end
end)
--
local menuDebounce = os.clock()
utility.toggleMenu = function(bool)
	if bool == not internal.menuOpen then
		return
	end
	if internal.menuOpen == false then
		internal.menuOpen = true
		local menu = scriptObjects.menuUI
		menu.Parent = game:GetService('Players').LocalPlayer:FindFirstChildWhichIsA('PlayerGui')
		menu.Adornee = scriptObjects.menuBrick
		scriptObjects.menuBrick.Parent = workspace.CurrentCamera
		utility.playSound(6803027588,1)
		game:GetService('TweenService'):Create(scriptObjects.menuBrick,TweenInfo.new(0.15),{
			Size = scriptObjects.menuScale * ((savedSettings.FaceMenu and 7) or 1)
		}):Play()
	else
		internal.menuOpen = false
		utility.playSound(6803027588,.8)
		game:GetService('TweenService'):Create(scriptObjects.menuBrick,TweenInfo.new(0.15),{
			Size = Vector3.zero
		}):Play()
	end
	menuDebounce = os.clock()
end
UIS.InputBegan:Connect(function(key)
	if (key.KeyCode==scheme.Menu or key.KeyCode==indexScheme.Menu) and os.clock()-menuDebounce > 0.2 then
		utility.toggleMenu(internal.menuOpen)
	end
end)
--// Settings Section
function StartSlider(ToggleFrame,SettingName,Func)
	local button = ToggleFrame.Toggle:WaitForChild("SliderBG")
	local SlideButton = button:WaitForChild("SlideButton")
	local Left = UDim2.new(0.072,0,0.174,0)
	local Right = UDim2.new((1-0.072) - 0.289,0,0.174,0)
	local setFunc = function()
		if savedSettings[SettingName]==true then
			game:GetService("TweenService"):Create(SlideButton,TweenInfo.new(0.15),{
				Position = Left,
				BackgroundColor3 = Color3.fromRGB(255,95,95)
			}):Play()
			savedSettings[SettingName] = false
		else
			game:GetService("TweenService"):Create(SlideButton,TweenInfo.new(0.15),{
				Position = Right,
				BackgroundColor3 = Color3.fromRGB(95,255,95)
			}):Play()
			savedSettings[SettingName] = true
		end
		if Func then
			Func(savedSettings[SettingName])
		end
	end
	button.MouseButton1Down:Connect(setFunc)
	SlideButton.MouseButton1Down:Connect(setFunc)
end
function SetSlider(ToggleFrame,SettingName,Boolean)
	savedSettings[SettingName] = Boolean
	local button = ToggleFrame:WaitForChild("SliderBG")
	local SlideButton = button:WaitForChild("SlideButton")
	local Left = UDim2.new(0.072,0,0.174,0)
	local Right = UDim2.new((1-0.072) - 0.289,0,0.174,0)
	if Boolean==false then
		game:GetService("TweenService"):Create(SlideButton,TweenInfo.new(0.15),{
			Position = Left,
			BackgroundColor3 = Color3.fromRGB(255,95,95)
		}):Play()
	elseif Boolean == true then
		game:GetService("TweenService"):Create(SlideButton,TweenInfo.new(0.15),{
			Position = Right,
			BackgroundColor3 = Color3.fromRGB(95,255,95)
		}):Play()
	end
end
function onClick(button,doFunc)
	if button:IsA("TextButton") then
		button.MouseButton1Down:Connect(function()
			if savedSettings.UISounds then
				utility.playSound(7107162229,1)
			end
			doFunc()
		end)
	end
end

--Setting up HomeMenu
internal.ESPs = {}
internal.ESPs.Parts = {}
internal.ESPs.Players = {}

internal.Connections = {}
internal.Connections.ESPs = {}
internal.Connections.ESPs.Players = {}

internal.ESPs.Holder = utility.Create("ScreenGui",User:FindFirstChildWhichIsA('PlayerGui'))
internal.ESPs.Holder.Name = "StorageESP"

StartSlider(utility.getObjectInMenu("FaceMenu"),"FaceMenu",function(boolean)
	scriptObjects.menuBrick.Size = scriptObjects.menuScale * ((boolean==true and 7) or 1)
end)

StartSlider(utility.getObjectInMenu("PartESP"),"PartESP",function(boolean)
	if boolean then
		for i,v in pairs(workspace:GetDescendants())do
			if i%2000==0 then
				game:GetService("RunService").RenderStepped:Wait()
			end
			if v:IsA("BasePart") and v.Anchored == false and not (v:FindFirstAncestorWhichIsA("Model") and game:GetService('Players'):GetPlayerFromCharacter(v:FindFirstAncestorWhichIsA("Model"))) then
				local Highlight = utility.Create("Highlight")
				Highlight.Adornee = v
				Highlight.Name = tostring(v)
				Highlight.FillTransparency = 1
				Highlight.OutlineColor = Color3.new(1,0.5,1)
				Highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
				Highlight.Parent = internal.ESPs.Holder
				local temporaryEvent = nil
				temporaryEvent = v:GetPropertyChangedSignal("Anchored"):Connect(function()
					if v.Anchored == true then
						Highlight.Adornee = nil
					else
						Highlight.Adornee = v
					end
				end)
				local temporaryEvent2 = nil
				temporaryEvent2 = Highlight:GetPropertyChangedSignal('Parent'):Connect(function()
					if Highlight.Parent==nil then
						temporaryEvent:Disconnect()
						temporaryEvent2:Disconnect()
						Highlight.Adornee = nil
						Highlight:Destroy()
					end
				end)
				table.insert(internal.ESPs.Parts,Highlight)
			end
		end
	else
		for i,v in pairs(internal.ESPs.Parts)do
			v.Adornee = nil
			v:Destroy()
		end
	end
end)

StartSlider(utility.getObjectInMenu("UISounds"),"UISounds")
StartSlider(utility.getObjectInMenu("Walking"),"Walking")

StartSlider(utility.getObjectInMenu("PlayerESP"),"PlayerESP",function(boolean)
	if boolean then
		local onAdd=function(plr)
			local v = plr.Character
			local Highlight = utility.Create("Highlight")
			Highlight.Name = tostring(v)
			Highlight.FillTransparency = 1
			Highlight.OutlineColor = Color3.new(0.2, 1, 0.6)
			Highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
			if v then
				Highlight.Adornee = v
				Highlight.Parent = internal.ESPs.Holder
			end
			local added = plr.CharacterAdded:Connect(function(char)
				task.delay(0.5,function()
					Highlight.Adornee = char
				end)
			end)
			internal.Connections.ESPs.Players[plr.Name] = added
			table.insert(internal.ESPs.Players,Highlight)
		end
		for _,plr in pairs(game:GetService("Players"):GetPlayers())do
			onAdd(plr)
		end
		table.insert(internal.Connections.ESPs.Players,game:GetService("Players").PlayerAdded:Connect(onAdd))
	else
		for i,v in pairs(internal.ESPs.Players)do
			v.Adornee = nil
			v:Destroy()
		end
		for i,v in pairs(internal.Connections.ESPs.Players)do
			v:Disconnect()
			v = nil
		end
	end
end)

--Hiding tested uis for the main menu
for i,v in pairs(scriptObjects.menuUI.Menu.Main:GetChildren())do
	v.Visible = false
	if v.Name=='Home' then
		v.Visible = true
	end
end

--// Keyboard scripting section:
scriptObjects.keyboardUI.Parent = ((internal.strongIdentity and game:GetService('CoreGui')) or User:FindFirstChildWhichIsA('PlayerGui'))
scriptObjects.keyboardUI.Adornee = scriptObjects.keyboardBrick

local upperCase = true
local inputTextbox = nil
local keyboardFunctions = {
	Keys = {},
	Case = {
		Toggle = function(bool)
			upperCase = bool
			for _,uiButton in pairs(scriptObjects.keyboardUI:GetDescendants())do
				if uiButton:IsA("TextButton") and uiButton.Text:len() == 1 then
					if upperCase then
						uiButton.Text = uiButton.Text:upper()
					else
						uiButton.Text = uiButton.Text:lower()
					end
				end
			end
		end,
	}
}
keyboardFunctions.Case.Toggle(false) --// Usually keyboards start with no caps.

UIS.TextBoxFocused:Connect(function(inp) --// Code in enter as TextBoxFocusReleased, or else keyboard would disappear
	if inp ~= inputTextbox then
		inputTextbox = inp
		scriptObjects.keyboardBrick.Parent = workspace.CurrentCamera
		scriptObjects.keyboardUI.Enabled = true
	end
end)
for i,v in pairs(scriptObjects.keyboardUI:GetDescendants())do
	if v:IsA("TextButton") then --// Default character is assigned the buttons' text
		local inputFunction = v.MouseButton1Down:Connect(function()
			if inputTextbox then --// Setting properties of the textbox to what I need it set to before editing it later ↓
				inputTextbox:CaptureFocus()
			end
			if inputTextbox and v.Text:len() == 1 then --// Special scripting on space and backspace
				inputTextbox.Text = inputTextbox.Text .. v.Text
				if v.Text == v.Text:upper() then
					keyboardFunctions.Case.Toggle(false)
				end
			end
			if inputTextbox then --// Special character if statements
				if v.Text=="___" then --Space
					inputTextbox.Text = inputTextbox.Text .. " "
				end
				if v.Text=="BACKSPACE" then --Backspace
					inputTextbox.Text = inputTextbox.Text:sub(0,#inputTextbox.Text - 1)
				end
				if v.Text=="ENTER" then --Enter
					utility.playSound(8755719003,1)
					inputTextbox:CaptureFocus()
					task.defer(function() --// Too early after CaptureFocus can prevent ReleaseFocus from firing, idk why
						inputTextbox:ReleaseFocus(true) --// Sends ReleaseFocus event to fire with "enter" argument being true
						inputTextbox = nil
						scriptObjects.keyboardBrick.Parent = nil
						scriptObjects.keyboardUI.Enabled = false
					end)
				end
				if v.Text=="CASE" then --Case toggler
					keyboardFunctions.Case.Toggle(not upperCase)
				end
				if inputTextbox then
					inputTextbox.CursorPosition = inputTextbox.Text:len() + 10
				end
			end
		end)
		table.insert(keyboardFunctions.Keys,inputFunction)
	end
end
--// After scriptobjects were defined, create notification promp:
scriptObjects.menuUI.Prompt.Hide.MouseButton1Down:Connect(function()
	scriptObjects.menuUI.Prompt.Visible = false
end)
utility.notify = function(title,message,sfx)
	scriptObjects.menuUI.Prompt.Title.Text = tostring(title)
	scriptObjects.menuUI.Prompt.Message.Text = tostring(message)
	scriptObjects.menuUI.Prompt.Visible = true
	utility.playSound((sfx or 654933978),1)
end
--// Game Tab section:
locals.gameTab = scriptObjects.menuUI.Menu.Main.Teleports
locals.gameButton = locals.gameTab.GameTab:Clone()
locals.gameTab.GameTab:Destroy()
locals.createGameTab = function(title, gameDesc, placeId)
	local newTab = locals.gameButton:Clone()
	newTab.Title.Text = title or "[undefined]"
	newTab.Content.Text = gameDesc or "Description"
	newTab.Use.MouseButton1Down:Connect(function()
		internal.blinded = true --// This saves you all
		task.wait(0.1) --// Motion sickness from freezing
		pcall(function()
			game:GetService("TeleportService"):Teleport(placeId,User)
		end)
		task.wait(1.5)
		internal.blinded = false
	end)
	newTab.Parent = locals.gameTab
end
for i,v in pairs(internal.gamesList)do
	locals.createGameTab(v[2],v[3],v[1])
end

--// Settings Tab section:
locals.currentSettingPage = 1   +1
locals.settingMain = scriptObjects.menuUI.Menu.Main.Settings
locals.settingPageText = locals.settingMain.PageNumber
locals.settingPages  = {[1]=locals.settingMain.Page1,[2]=locals.settingMain.Page2}
locals.settingNext = locals.settingMain.Next
locals.settingPrev = locals.settingMain.Previous
locals.setPage = function()--// I can define locals in here since it's not in scope
	local newPage = locals.currentSettingPage
	if newPage==2 then
		newPage=newPage-1
	elseif newPage==1 then
		newPage=newPage+1
	end
	locals.currentSettingPage=newPage
	newPage = locals.settingPages[newPage]
	for i,v in pairs(locals.settingPages)do
		v.Visible = false
	end
	newPage.Visible = true
	locals.settingPageText.Text = tostring(locals.currentSettingPage) .. "/" .. tostring(#locals.settingPages)
end
locals.setPage()
locals.settingNext.MouseButton1Down:Connect(function()
	locals.setPage()
end)
locals.settingPrev.MouseButton1Down:Connect(function()
	locals.setPage()
end)

StartSlider(locals.settingPages[1].PersonalSpace,"PersonalSpace")
StartSlider(locals.settingPages[1].CharacterViewport,"CharacterViewport",function(visible)
	Viewport.Visible = visible
end)
StartSlider(locals.settingPages[2].SmoothTurning,"SmoothTurning")
StartSlider(locals.settingPages[2].Invisibility,"Invisibility")

locals.loopCache = {}
game:GetService("RunService").RenderStepped:Connect(function() --// init for settings
	if savedSettings.PersonalSpace then
		local loopCache = locals.loopCache
		local headCFrame = workspace.CurrentCamera.CFrame*VRService:GetUserCFrame(Enum.UserCFrame.Head)
		local people = workspace:GetPartBoundsInBox(headCFrame,Vector3.one*5,OverlapParams.new({['MaxParts']=2000}))
		local realPeople = {}
		for _,base in pairs(people)do
			if base:IsA("BasePart") and base.Parent:IsA("Model") and base.Parent:FindFirstChildWhichIsA("Humanoid") and Players:GetPlayerFromCharacter(base.Parent) and not table.find(realPeople,base.Parent) then
				table.insert(realPeople,base.Parent)
			end
		end
		for _,model in pairs(loopCache)do
			if model:FindFirstChildWhichIsA("Humanoid") and not table.find(realPeople,model) and Players:GetPlayerFromCharacter(model) then
				for _,desc in pairs(model:GetDescendants())do
					if desc:IsA("BasePart") and desc:GetAttribute("realTransparency") then
						game:GetService("TweenService"):Create(desc,TweenInfo.new(0.25),{Transparency = desc:GetAttribute("realTransparency")}):Play()
					end
				end
			end
		end
		for _,model in pairs(realPeople)do
			for _,desc in pairs(model:GetDescendants())do
				if desc:IsA("BasePart") then
					if not desc:GetAttribute("realTransparency") then
						desc:SetAttribute("realTransparency",desc.Transparency)
					end
					game:GetService("TweenService"):Create(desc,TweenInfo.new(0.25),{Transparency = 1}):Play()
				end
			end
			table.insert(loopCache,model)
		end
	else
		for _,model in pairs(locals.loopCache)do
			if Players:GetPlayerFromCharacter(model) then
				for _,desc in pairs(model:GetDescendants())do
					if desc:IsA("BasePart") and desc:GetAttribute("realTransparency") then
						game:GetService("TweenService"):Create(desc,TweenInfo.new(0.25),{Transparency = desc:GetAttribute("realTransparency")}):Play()
					end
				end
			end
		end
		for i,v in pairs(locals.loopCache)do
			table.remove(locals.loopCache,i)
		end
	end
end)

--// Social Tab section:
internal.userFrames = {}
locals.social = scriptObjects.menuUI.Menu.Main.Social
locals.userClone = locals.social.PlayerList.UserFrame:Clone()
locals.social.PlayerList.UserFrame:Destroy()
locals.socialActionVictim = nil;
locals.initiateUserFrame = function(plr)
	local onRemove = nil --// For the PlayerRemoving event
	local newFrame = locals.userClone:Clone()
	local headshot = newFrame.UserIcon
	newFrame.plr.Text = plr.DisplayName
	newFrame.Parent = locals.social.PlayerList
	onRemove = Players.PlayerRemoving:Connect(function(left)
		if left==plr then
			newFrame:Destroy()
			onRemove:Disconnect()
		end
	end)
	newFrame.MouseEnter:Connect(function()
		newFrame.plr.Text = plr.Name
	end)
	newFrame.MouseLeave:Connect(function()
		newFrame.plr.Text = plr.DisplayName
	end)
	newFrame.plr.MouseButton1Down:Connect(function()
		locals.social.ActionMenu.Visible = true
		locals.socialActionVictim = plr
		locals.social.ActionMenu.user.Text = plr.Name .. " (@" .. plr.DisplayName .. ") "
	end)
	pcall(function()
		game:GetService("FriendService")
		if plr and plr.IsFriendsWith and plr:IsFriendsWith(User.UserId)==true then
			newFrame.BackgroundColor3 = Color3.fromRGB(115, 105, 70) --// Gold indicates a friend
		end
	end)
	if plr == User then
		newFrame.BackgroundColor3 = Color3.fromRGB(150, 150, 150)
		newFrame.plr.TextColor3 = Color3.fromRGB(30,30,30)
	end
	pcall(function()
		local icon = Players:GetUserThumbnailAsync(plr.UserId,Enum.ThumbnailType.HeadShot,Enum.ThumbnailSize.Size60x60)
		headshot.Image = icon
	end)
end
for _,player in pairs(Players:GetPlayers())do
	locals.initiateUserFrame(player)
end
Players.PlayerAdded:Connect(locals.initiateUserFrame)
locals.social.ActionMenu.teleport.MouseButton1Down:Connect(function()
	local vict = locals.socialActionVictim
	if vict and vict.Character then
		local GoTo = vict.Character:FindFirstChild("HumanoidRootPart") or vict.Character:FindFirstChildWhichIsA("BasePart",true)
		if GoTo then
			utility.moveCharacter(CFrame.new((GoTo.CFrame*CFrame.new(0,3,3)).Position))
		end
	else
		utility.notify("Error","User cannot be teleported to. User either left or has no valid root.")
	end
end)
locals.social.ActionMenu.highlighter.MouseButton1Down:Connect(function()
	local vict = locals.socialActionVictim
	if vict and vict.Character then
		if not vict.Character:FindFirstChild("menuHighlighter") then
			local Highlight = utility.Create("Highlight")
			Highlight.Adornee = vict.Character
			Highlight.Name = "menuHighlighter"
			Highlight.FillTransparency = 1
			Highlight.OutlineColor = Color3.new(0.15, 0.3, 1)
			Highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
			Highlight.Parent = vict.Character
		else
			for _,child in pairs(vict.Character:GetDescendants())do
				if child:IsA("Highlight") and child.Name=='menuHighlighter' then
					child:Destroy()
				end
			end
		end
	else
		utility.notify("Error","User cannot be teleported to. User either left or has no valid root.")
	end
end)
game:GetService("RunService").RenderStepped:Connect(function()
	local vict = locals.socialActionVictim
	if vict and vict.Character then
		if vict.Character:FindFirstChild('menuHighlighter') then
			locals.social.ActionMenu.highlighter.Text = "unhighlight"
		else
			locals.social.ActionMenu.highlighter.Text = "highlight"
		end
	else
		locals.social.ActionMenu.highlighter.Text = "highlight"
	end
end)
locals.social.ActionMenu.Cancel.MouseButton1Down:Connect(function()
	locals.social.ActionMenu.Visible = false
end)

--// Waypoints section:
internal.pinpoints = {}
locals.waypointMenu = scriptObjects.menuUI.Menu.Main.Pinpoints
locals.coordFrame = locals.waypointMenu.SavedCoords.Frame:Clone()
locals.waypointMenu.SavedCoords.Frame:Destroy()
locals.waypointMenu.Save.MouseButton1Down:Connect(function() --// Local usage here is fine, it's not in scope.
	local currentPosition = CFrame.new((Camera.CFrame*VRService:GetUserCFrame(Enum.UserCFrame.Head)).Position) --// Position, only
	local newFrame = locals.coordFrame:Clone()
	table.insert(internal.pinpoints,newFrame)
	local name = locals.waypointMenu.CoordName.Text
	if name:len() <= 0 then
		name = "pin#" .. tostring(utility.lenTable(internal.pinpoints))
	end
	newFrame.SavedName.Text = name
	newFrame.Parent = locals.waypointMenu.SavedCoords
	newFrame.goto.MouseButton1Down:Connect(function()
		utility.moveCharacter(currentPosition)
	end)
	newFrame.delete.MouseButton1Down:Connect(function()
		newFrame:Destroy()
		for i,v in pairs(internal.pinpoints)do
			if v==newFrame then
				table.remove(internal.pinpoints,i)
			end
		end
	end)
end)
locals.waypointMenu.Clear.MouseButton1Down:Connect(function()
	for i,v in pairs(internal.pinpoints)do
		v:Destroy()
	end
	internal.pinpoints={}
end)

--// Prop creation section:
locals.PropCreation = scriptObjects.menuUI.Menu.Main.PropCreation
locals.PropTab = locals.PropCreation.HatTab:Clone()
locals.PropCreation.HatTab:Destroy()
locals.RotatingHandles = {}
locals.LastOffsets = {} -- {RealHandle, Offset}
locals.Props = {} --// { {RealHandle, Offset}, {etc...},→ }
locals.Phantoms = {}
locals.SettingHat = nil

for i,v in pairs(User.Character:GetChildren())do
	if v:IsA("Accessory") and not utility.search(virtualHands,v.Handle) then
		local realHandle = v.Handle
		local handle = utility.removeJoints(v:Clone()).Handle --// returns a clone of the hat w/o joints/welds
		local newTab = locals.PropTab:Clone()
		local HatVPF = newTab.HatVPF
		local newCam = Instance.new("Camera")
		newTab.Title.Text = v.Name
		newCam.Parent = HatVPF
		HatVPF.CurrentCamera = newCam
		newCam.FieldOfView = 40
		newCam.CFrame = CFrame.new(0,1,handle.Size.Magnitude + 2) * CFrame.Angles(math.rad(-15),0,0)
		handle.Parent = HatVPF
		handle.CFrame = CFrame.new(0,0,0)
		newTab.Parent = locals.PropCreation
		table.insert(locals.RotatingHandles,handle)
		local doAdjust = function(isWorld)
			local fakeHandle = utility.removeJoints(realHandle:Clone())
			fakeHandle.Anchored = true
			fakeHandle.Parent = workspace.CurrentCamera
			if locals.SettingHat then
				locals.SettingHat[1]:Destroy() --// Deletes previous phantom
				locals.SettingHat = {}
			end
			locals.SettingHat = {fakeHandle,realHandle,CFrame.new(0,0,-4),isWorld}
			fakeHandle.Transparency = 0.5
			fakeHandle.CFrame = (Camera.CFrame*VRService:GetUserCFrame(Enum.UserCFrame.Head))
			task.delay(0.025,function()
				utility.toggleMenu(true)
			end)
		end
		newTab.Adjust.MouseButton1Down:Connect(function() --// INITIATE THE SETUP FOR CREATING THE PROP
			doAdjust(false)
		end)
		newTab.WorldAdjust.MouseButton1Down:Connect(function() --// INITIATE THE SETUP FOR CREATING THE PROP
			doAdjust(true)
		end)
		newTab.Unequip.MouseButton1Down:Connect(function()
			for i,v in pairs(locals.Props)do
				if v[1]==realHandle then
					table.remove(locals.Props,i)
				end
			end
		end)
		newTab.Use.MouseButton1Up:Connect(function()
			local exists = false
			for i,v in pairs(locals.LastOffsets)do
				if v[1]==realHandle then
					exists = true
					for ind,check in pairs(locals.Props)do
						if check[1]==realHandle then
							table.remove(locals.Props,ind)
						end
					end
					table.insert(locals.Props,{
						v[1],
						v[2],
						v[3],
					})
				end
			end
			if exists==false then
				doAdjust()
			end
		end)
	end
end
UIS.InputBegan:Connect(function(key)
	if key.KeyCode==scheme.AdjustProp or key.KeyCode==indexScheme.AdjustProp then
		local phantom = locals.SettingHat
		local fake = phantom[1]
		local real = phantom[2]
		local isWorld = phantom[4] --// true or false
		local rightHand = Camera.CFrame*VRService:GetUserCFrame(Enum.UserCFrame.RightHand)
		if phantom then
			locals.SettingHat[3] = fake.CFrame:ToObjectSpace(rightHand):Inverse()
		end
	end
	local PropHand = ((key.KeyCode==scheme.ConfirmPropL and "Left") or (key.KeyCode==scheme.ConfirmPropR and "Right")) or nil
	if PropHand and locals.SettingHat and internal.menuOpen==false then
		local insTable = {
			locals.SettingHat[2],
			PropHand.."Hand",
			locals.SettingHat[1].CFrame:ToObjectSpace(Camera.CFrame * VRService:GetUserCFrame(Enum.UserCFrame[PropHand .. "Hand"])):Inverse()
		}
		if locals.SettingHat[4]==true then --// It's for the WORLD space
			insTable[2] = "WorldSpace"
			insTable[3] = locals.SettingHat[1].CFrame
		end
		for i,v in pairs(locals.LastOffsets)do
			if v[1]==insTable[1] then
				table.remove(locals.LastOffsets,i)
			end
		end
		table.insert(locals.Props,insTable)
		if insTable[2]~="WorldSpace" then
			table.insert(locals.LastOffsets,insTable)
		end
		pcall(function()
			locals.SettingHat[1]:Destroy()
		end)
		locals.SettingHat = nil
	end
end)
UIS.InputEnded:Connect(function(key)
	if key.KeyCode==scheme.AdjustProp or key.KeyCode==indexScheme.AdjustProp then
		local phantom = locals.SettingHat
		local fake = phantom[1]
		local real = phantom[2]
		local headCFrame = Camera.CFrame*VRService:GetUserCFrame(Enum.UserCFrame.Head)
		if phantom then
			locals.SettingHat[3] = fake.CFrame:ToObjectSpace(headCFrame):Inverse()
		end
	end
end)
game:GetService("RunService").RenderStepped:Connect(function()
	local headCFrame = Camera.CFrame*VRService:GetUserCFrame(Enum.UserCFrame.Head)
	local rightHand = Camera.CFrame*VRService:GetUserCFrame(Enum.UserCFrame.RightHand)
	local phantomHandle = locals.SettingHat and locals.SettingHat[1]
	if phantomHandle then
		local fakeHandle = locals.SettingHat[1]
		local realHandle = locals.SettingHat[2]
		local offset = locals.SettingHat[3]
		local buttonPressed = utility.IsKeyDown(scheme.AdjustProp) or utility.IsKeyDown(indexScheme.AdjustProp)
		if buttonPressed then
			fakeHandle.CFrame = rightHand*offset
		else
			fakeHandle.CFrame = headCFrame*offset
		end
	end
end)

Events.SteadyStepped.Event:Connect(function()
	if locals.PropCreation.Visible==true then
		for _,part in pairs(locals.RotatingHandles) do
			part.CFrame=part.CFrame*CFrame.Angles(0,math.rad(2),0)
		end
	end
end)
--// Plugin section:
for _,asset in pairs(internal.checkBoxIds)do
	utility.loadAsset(asset)
end
locals.pluginMain = scriptObjects.menuUI.Menu.Main.Plugins
locals.pluginTab = locals.pluginMain.PluginTab:Clone()
locals.pluginMain.PluginTab:Destroy()
locals.addPlugin = function(str)
	str=(loadstring(str)()) --// turn str into a loadstring for the string documents
	if str.IsSpecificGame and str.IsSpecificGame~=game.PlaceId then
		return
	end
	str.Objects.MenuUI = scriptObjects.menuUI.Menu
	str.Objects.Tabs = scriptObjects.menuUI.Menu.Tabs
	str.Objects.Hands.Left = virtualHands.Left
	str.Objects.Hands.Right = virtualHands.Right
	local pluginTab = locals.pluginTab:Clone()
	pluginTab.Toggle.Image = internal.checkBoxIds.Disabled
	pluginTab.Title.Text = str.Name
	pluginTab.Contents.Text = str.Description .. "\n"
	pluginTab.Parent = locals.pluginMain
	pluginTab.Toggle.MouseButton1Down:Connect(function()
		str.Enabled = not str.Enabled
	end)
	str.StatusChanged:Connect(function(newBoolean)
		if newBoolean==true then
			pluginTab.Toggle.Image = internal.checkBoxIds.Enabled
		else
			pluginTab.Toggle.Image = internal.checkBoxIds.Disabled
		end
	end)
end
for i,v in pairs(listfiles("Brew"))do --// Gets files under sourceFolder
	local len = #v
	if v:find(internal.pluginExtension) and internal.hasFileAccess then
		pcall(function()
			locals.addPlugin(readfile(internal.sourceFolder .. v))
		end)
	end
end

--// Client information button:
utility.getFrameRate()
internal.RejectCharacterDeletions = "N/A"
pcall(function()
	local gethiddenproperty = gethiddenproperty or blank
	internal.RejectCharacterDeletions=gethiddenproperty(workspace,"RejectCharacterDeletions")
	if internal.RejectCharacterDeletions then
		internal.RejectCharacterDeletions=internal.RejectCharacterDeletions.Name
	end
	if tostring(internal.RejectCharacterDeletions)=='nil' then
		internal.RejectCharacterDeletions = "N/A"
	end
end)
local ClientInformation = scriptObjects.menuUI.Menu.ClientInformation
game:GetService("RunService").RenderStepped:Connect(function()
	local osDate = os.date("*t")
	local osHour = osDate.hour
	local osMin = osDate.min
	if osMin<10 then
		osMin= "0" .. tostring(osMin)
	end
	local amPM = osHour < 12 and "A.M." or "P.M."
	if amPM=="P.M." then
		osHour=osHour-12
	end
	local set = {
		['Time'] = tostring(osHour) .. ":" .. osMin .. " " .. amPM,
		['Date'] = osDate.month .. "/" .. osDate.day .. "/" .. osDate.year,
	}
	ClientInformation.Text = "RejectCharacterDeletions: " .. tostring(internal.RejectCharacterDeletions) .. "\nFPS: " .. tostring(getfenv(0).FPS)
	scriptObjects.menuUI.Menu.ContextBar.Time.Text = set.Time
	scriptObjects.menuUI.Menu.ContextBar.Date.Text = set.Date
end)

--// Wrist-Rotation functions
local RFlat = utility.Create("Part",nil,{
	['Size'] = Vector3.zero,
	['CFrame'] = fakeLimbs["Right Arm"].CFrame,
	['Name'] = "WristRotation",
	['Anchored'] = true,
})
local Rotators = {
	['Right'] = function(functions_)
		if not internal.debounces.RotRight then
			internal.debounces.RotRight = 0
		end
		if os.clock()-internal.debounces.RotRight > 0.5 then
			utility.playSound(3784340039,1)
			local Arm = fakeLimbs["Right Arm"]
			local CFrameLookat = CFrame.lookAt(Arm.Position,(Arm.CFrame*CFrame.new(0,-10,0)).Position*Vector3.new(1,0,1)+Vector3.new(0,Arm.Position.Y,0)) * CFrame.Angles(math.pi/2,0,0)
			RFlat.CFrame = CFrameLookat
			local X,Y,Z = Arm.CFrame:ToObjectSpace(RFlat.CFrame):ToOrientation()
			local deg = math.deg(Y)
			Y=math.deg(Y)
			internal.debounces.RotRight = os.clock()
			if (Y > 135 and Y < 150) then
				for _,f in pairs(functions_)do
					task.spawn(f)
				end
			end
		end
	end,
	['Left'] = function(functions_)
		if not internal.debounces.RotLeft then
			internal.debounces.RotLeft = 0
		end
		if os.clock()-internal.debounces.RotLeft > 0.5 then
			internal.debounces.RotLeft = os.clock()
			for _,f in pairs(functions_)do
				task.spawn(f)
			end
		else
			internal.debounces.RotLeft = 0
		end
	end,
}
local WhenRotatedDo = {
	['Right'] = function()
		for i,v in pairs(tools)do
			if v[3] == virtualHands.Right then
				table.remove(tools,i)
			end
		end
	end,
}

--// Set prop creation tool placement

--// Let them know
utility.notify("Menu Update 2",[[

Please recenter yourself before saying you're moving weird.

]])

scriptObjects.menuUI.Menu.Version.Text = "Version " .. internal.VERSION

locals.notified = {} --// One time notification when opening a new tab
utility.changeMenu("")
utility.changeMenu("Home")
internal.menuChanged.Event:Connect(function(menu)
	if not table.find(locals.notified,menu) then
		table.insert(locals.notified,menu)
		if menu=='Settings' then
			utility.notify("Real quick:","Not every setting is complete. So if some sliders are not working, you know why.")
		elseif menu=="Teleports" then
			utility.notify("Disclaimer","If you have any games that work, send them in the discord if you want :)\n\n(Not all games support TeleportService, so if you can't teleport from your current game to a new one, you know why.)")
		elseif menu=='PropCreation' then
			utility.notify("HOW-TO","When pressing USE/ADJUST on the hat, a transparent version of it will pop up.\n\nNon-Index: Use your grip to adjust it, then press R-or-L trigger to equip.\n\nIndex: Using B will adjust, A will place it on your RIGHT hand, and X will place it on your LEFT hand.",9064436387)
		elseif menu=='Plugins' then
			if not internal.hasFileAccess then
				utility.notify("Incompatible","Your exploit does not support plugins. Sorry.",9064436387)
			end
		end
	end
end)
--
for i,v in pairs(savedSettings)do
	pcall(function()
		local toggleUI = nil
		for _,ob in pairs(scriptObjects.menuUI:GetDescendants())do
			if ob:FindFirstChild("Toggle") and ob.Name==tostring(i) then
				SetSlider(ob.Toggle,tostring(i),v)
			end
		end
	end)
end
utility.setTab("PropCreation",true)
utility.setTab("Plugins",true)
